name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  REDIS_VERSION: '7.0'

jobs:
  # Lint and Code Quality
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🔍 Run ESLint (Backend)
      run: cd backend && npm run lint

    - name: 🔍 Run ESLint (Frontend)
      run: cd frontend && npm run lint

    - name: 💄 Check Prettier formatting
      run: |
        cd backend && npm run format:check
        cd ../frontend && npm run format:check

  # Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🔒 Run npm audit (Backend)
      run: cd backend && npm audit --audit-level=high

    - name: 🔒 Run npm audit (Frontend)
      run: cd frontend && npm audit --audit-level=high

    - name: 🛡️ Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  # Backend Tests
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install backend dependencies
      run: cd backend && npm ci

    - name: ⚙️ Setup test environment
      run: |
        cd backend
        cp config.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "REDIS_HOST=localhost" >> .env.test
        echo "REDIS_PORT=6379" >> .env.test

    - name: 🧪 Run backend tests
      run: cd backend && npm run test:ci
      env:
        NODE_ENV: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: 📊 Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        files: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Tests
  test-frontend:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install frontend dependencies
      run: cd frontend && npm ci

    - name: 🧪 Run frontend tests
      run: cd frontend && npm run test:ci

    - name: 📊 Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build Tests
  build:
    name: 🏗️ Build Tests
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🏗️ Build backend
      run: cd backend && npm run build

    - name: 🏗️ Build frontend
      run: cd frontend && npm run build

    - name: 📦 Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/build/
        retention-days: 7

  # E2E Tests
  e2e:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: ⚙️ Setup E2E environment
      run: |
        cd backend
        cp config.example .env
        echo "NODE_ENV=test" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env

    - name: 🚀 Start application
      run: |
        cd backend && npm start &
        cd frontend && npm start &
        sleep 30

    - name: 🎭 Run E2E tests
      run: npm run test:e2e

    - name: 📸 Upload E2E screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-screenshots
        path: e2e/screenshots/

  # Docker Build Test
  docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker images
      run: |
        docker build -t stock-analysis-backend ./backend
        docker build -t stock-analysis-frontend ./frontend

    - name: 🧪 Test Docker images
      run: |
        docker run --rm stock-analysis-backend npm test
        docker run --rm stock-analysis-frontend npm test

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, security, test-backend, test-frontend, build, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-production-url.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production..."
        # Add your deployment commands here
        # Example: rsync, docker push, AWS deploy, etc.

    - name: 📋 Create release
      if: github.event_name == 'push' && contains(github.event.head_commit.message, '[release]')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # Notification
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [lint, security, test-backend, test-frontend, build]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: ${{ needs.lint.result == 'success' && needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' }}
      run: |
        echo "✅ All checks passed! Ready for deployment."

    - name: 📢 Notify failure
      if: ${{ needs.lint.result == 'failure' || needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review and fix."

    # Optional: Slack/Discord notification
    # - name: 📢 Slack notification
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     channel: '#development'
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    #   if: always() 